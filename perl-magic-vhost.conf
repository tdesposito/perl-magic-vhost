<Perl>

=head1 Name

perl-magic-vhost.conf 

by Todd D. Esposito, ToddEsposito@ProdisInc.com

$Id: perl-magic-vhost.conf,v 1.2 2003/07/29 19:40:34 tdesposito Exp $

=head1 Copyright

Copyright 2003 Prodis Incorporated.
Released under the Apache Software License

Use it as you see fit, but please credit us if you do.

=head1 Description

This is a nifty (well, *I* think it's nifty) Perl wrapper around
creating dynamic VHosts in apache.  Basically, we look under
$vhostroot for folders, each one representing a different vhost
ip/port. Inside that we find folders (probably symlinks to
folders, really) for each different vhost name. Within each of
THOSE folders, we have a file called I<vhost.conf> which we will
build an "Include" directive for inside the new <VirtualHost> section.

Usage: in your apache.conf (or httpd.conf) file, add:
       Include conf/perl-magic-vhost.conf

You'll need to modify at least one parameter, $vhostroot, to
point to the place where you'll create your tree.

The individual I<vhost.conf> files should NOT specify the ServerName,
and I'd like to generate ServerAlias directives, but don't yet, so 
those B<could> be used but shouldn't.  Anything else you'd normally
put into a <VirtualHost> container goes into the I<vhost.conf> file, but
without the <VirtualHost> tag, of course.

And, of course, you must have mod_perl included BEFORE this script.

If you want to see this thing operate without actually using it
inside apache, you can just comment out the <Perl> and </Perl>
lines, then UNCOMMENT the block at the very end (marked "DEBUG")
and run it from the command line with:
       perl perl-magic-vhost.conf

When debugging, note that you should NOT have use strict set, or
Perl will choke on the fact that the arrays and hashes haven't been
declared.

=head1 Example

So, you have a tree like this:

(apache-root)/
  bin/
  conf/
    vhost_conf/  (<-- this is $vhostroot)
      192.168.0.1:80
        www.example.com -> ../../htdocs/www.example.com
        www.aliasexample.com -> ../../htdocs/www.example.com
        www.anotherexample.com -> ../../htdocs/www.anotherexample.com
      192.168.0.2:80
        www.yaexample.com -> ../../htdocs/www.yaexample.com
  htdocs/
    www.example.com/
      vhost.conf
      docroot/
        index.html
        yougettheidea.html
    www.anotherexample.com/
      vhost.conf
      docroot/
        index.html
        yadayadayada.html
    www.yaexample.com/
      vhost.conf
      docroot/
        index.html
        isthisreallynecessary.html

This will answer to either www.example.com or www.aliasexample.com
on 192.168.0.1 (port 80), using the configuration file
(apache-root)/htdocs/www.example.com/vhost.conf, and to 
www.anotherexample.com on the same IP.

It will also respond to www.yaexample.com on 192.168.0.2:80.

=head1 SSL Notes

You can do SSL (port 443) stuff with this too, but you have a bit
more of a trick with the vhost.conf if you want to have a vhost
site have both secured and unsecured; I put a "dummy" entry under
htdocs with just a vhost.conf which sets up the ssl stuff, and
includes the "real" vhost.conf, then make two vhosts (one on :80
and one on :443) as above.  

Please note that you can't have two different certs for two 
different sites on the same IP. This is a limitation/feature of
SSL, not Apache or this script. The SSL channel will work, but 
only one of the sites will be using the correct cert, so all the 
others will generate cert warnings in the browser.

=head1 Known problems

Not many at this point.  There is one thing I want to fix, but
just haven't had the time to hack at yet.  First, there is no
good way to define 'ServerAlias' lines.  Actually, in the time
it's taken me to write this, I could have probably solved it.
Yeah, I could just put it in the vhost.conf files, but I don't
like that solution.

It's on the short list, but my short list is about 7.2 miles long ;-)

=cut

##############################################################################
# Configuration Section.  Modify this to meet your system.
##############################################################################

my $vhostroot = "/etc/httpd/perlvhost.d"; # magic-vhost links here.

##############################################################################
# End configuration section.  You shouldn't have to touch
# anything below this comment.  And if you do, please e-mail
# your changes to me so I can update the script and everyone
# can, well, let's just be optimistic and say they'll benefit.
#
# Ok, Ok, and just to be clear, I know TMTOWTDI, and I chose
# this way because it makes sense to me.  I'm not worried about
# wringing a few milliseconds out of my Apache startup time,
# because it rarely needs to start up.  If you're an admin at
# some huge ISP and want to use my script and make it perform
# REALLY REALLY fast, I'm all for it.
##############################################################################

opendir (IPS, "$vhostroot") or die "Can't open $vhostroot: $!\n";
while (defined (my $ip = readdir (IPS)))
  {
    unless ($ip =~ /^\./)
      {
        # Make sure we're listening to this ip/port
        push (@Listen, $ip);
        $ip =~ /.*:([0-9]+)/; my $port = $1;

        # Set up the NameVirtualHost for this ip/port
        push (@NameVirtualHost, $ip);

        opendir (VHOSTS, "$vhostroot/$ip") or die "Can't open $vhostroot/$ip: $!\n";
        while (defined (my $vhost = readdir (VHOSTS)))
          {
            unless ($vhost =~ /^\./)
              {
	        my $conf = "$vhostroot/$ip/$vhost/vhost_$port.conf";
                $VirtualHost{$ip} = [] unless defined $VirtualHost{$ip};
                push (@{$VirtualHost{$ip}}, { ServerName => "$vhost", Include => "$conf" });
              }
          }
      }
  }

</Perl>

# DEBUG:
#foreach (@Listen) { print "Listen $_\n"; }
#foreach (@NameVirtualHost) { print "NameVirtualHost $_\n"; }
#foreach my $key (keys %VirtualHost)
#  {
#    foreach my $sub (@{$VirtualHost{$key}})
#      {
#        print "<VirtualHost $key>\n";
#        foreach my $item (keys %{$sub})
#          {
#            my $val = (%{$sub})->{$item};
#            print "\t$item $val\n"
#          }
#        print "</VirtualHost>\n"
#      }
#  }
